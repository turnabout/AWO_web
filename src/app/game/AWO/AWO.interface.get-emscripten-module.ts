import AWO_EM_MODULE from "assets/AWO.js";

/**
 * Loads and gets the emscripten module used for interacting with the game.
 *
 * @param gameCanvas Reference to the canvas element used by the game.
 * @param emDirPath Path to directory containing files generated by emscripten.
 * @param progressUpdateCB Called when the Emscripten module loading updates.
 * @param loadEndCB Called when the Emscripten module loading finishes.
 * @returns The module object used by emscripten.
 */
export function getEmscriptenModule(
    gameCanvas: HTMLCanvasElement,
    emDirPath: string,
    progressUpdateCB: (progress: number, progressStr: string) => void,
    loadEndCB: () => void,
): any {

    // Add adjustments to the canvas element.
    // TODO: make more user-friendly
    gameCanvas.addEventListener("webglcontextlost", (e) => {
        alert("WebGL context lost. You will need to reload the page.");
        e.preventDefault();
    }, false);

    // Object with custom properties for AWO emscripten module to use
    return AWO_EM_MODULE({
        preRun:  [],
        postRun: [],

        // Prints `printf` outputs.
        print(text: string) {
            if (arguments.length > 1) {
                text = Array.prototype.slice.call(arguments).join(" ");
            }

            console.log(text);
        },

        // Prints error messages
        printErr(text: string) {
            if (arguments.length > 1) {
                text = Array.prototype.slice.call(arguments).join(" ");
            }

            console.error(text);
        },

        // Used by module to get the canvas element
        canvas: (() => {
            return gameCanvas;
        })(),

        // Set the current loading status message
        setStatus(text: string) {
            if (!this.setStatus.last) {
                this.setStatus.last = { time: Date.now(), text: "" };
            }

            if (text === this.setStatus.last.text) {
                return;
            }

            const m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
            const now = Date.now();

            if (m && now - this.setStatus.last.time < 30) {
                // return; // If this is a progress update, skip it if too soon
            }

            this.setStatus.last.time = now;
            this.setStatus.last.text = text;

            // Update loading text
            progressUpdateCB(undefined, text);
        },

        totalDependencies: 0,

        // Current/max amount of times `monitorRunDependencies` gets called.
        currentRDCalls: 0,
        maxRDCalls: 14,

        monitorRunDependencies(remaining: number) {

            // Update loading progress
            progressUpdateCB(((++this.currentRDCalls) / this.maxRDCalls) * 100, "");

            this.totalDependencies = Math.max(this.totalDependencies, remaining);

            this.setStatus(
                remaining
                    ? "Preparing... (" + (this.totalDependencies - remaining) + "/" + this.totalDependencies + ")"
                    : "All downloads complete.",
            );
        },

        // Adjust location of files queried for
        locateFile(path: string, prefix: string) {
            return emDirPath + path;
        },

        // TODO: Set behaviour when abnormal program termination occurs
        onAbort() {
        },

        onRuntimeInitialized() {
            loadEndCB();
        },
    });
}
